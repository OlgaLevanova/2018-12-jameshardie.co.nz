@function rem($size, $context: 16) {
    $remSize: $size / $context;
    @return #{$remSize}rem;
}

@mixin select() {
    appearance: none;

    &::-ms-expand{
        display: none;
    }
}
@mixin placeholder ($color, $font) {
    ::-webkit-input-placeholder { /* Chrome */
        color: $color;
        font-size: rem(12);

        @media all and (min-width: map-get($grid-breakpoints, sm)) {
            font-size: $font;
        }
    }

    :-ms-input-placeholder { /* IE 10+ */
        color: $color;
        font-size: rem(12);

        @media all and (min-width: map-get($grid-breakpoints, sm)) {
            font-size: $font;
        }
    }

    ::-moz-placeholder { /* Firefox 19+ */
        color: $color;
        font-size: rem(12);
        opacity: 1;

        @media all and (min-width: map-get($grid-breakpoints, sm)) {
            font-size: $font;
        }
    }

    :-moz-placeholder { /* Firefox 4-18 */
        color: $color;
        font-size: rem(12);
        opacity: 1;

        @media all and (min-width: map-get($grid-breakpoints, sm)) {
            font-size: $font;
        }
    }
}

@mixin mediaMin($breakpoint){
    @if map-has-key($grid-breakpoints, $breakpoint) {
        @media (min-width: #{map-get($grid-breakpoints, $breakpoint)}) {
            @content;
        }
    }
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}

@mixin boxShadow($padding) {

    $colors: $blue, $orange;
    $classes: 'blue', 'orange', 'grey';

    @for $i from 1 through length($classes) {
        $class: nth($classes, $i);
        &.#{$class}{
            >span{
                box-shadow: $padding 1px 0 2px nth($colors, $i),
                    -$padding 1px 0 2px nth($colors, $i);
                outline:1px solid nth($colors, $i);
                box-decoration-break: clone;
            }
        }
    }

    /*box-shadow: $padding 1px 0 2px $color,
        -$padding 1px 0 2px $color;
    outline:1px solid $color;*/
}

@mixin uniformLetterSpacing() {
    // SAFARI
    @media not all and (min-resolution: 0.001dpcm) {
        letter-spacing: -0.05rem;
    }
    // IE
    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
        letter-spacing: rem(0.96);
    }
    // FIREFOX
    @-moz-document url-prefix('') {
        letter-spacing: rem(-0.01);
    }
}

@mixin hoverLink($color, $padding){
    position:relative;

    &:after{
        position:absolute;
        right:100%;
        bottom:-2px;
        left:rem($padding);
        height:2px;
        background:$color;
        content:'';
        transition:all 0.2s;
    }

    &:hover{
        &:after{
            right:rem($padding);
        }
    }
}
@mixin hoverLine(){
    &:after{
        position:absolute;
        bottom:0;
        left:0;
        width:0;
        height:rem(5);
        background-color:$jh-green;
        content:'';
        transition:all 0.2s;
    }
}
@mixin greyBackBlock(){
    position:relative;

    >div{
        position:relative;
    }
    &:before{
        position:absolute;
        top:0;
        right:0;
        left:0;
        height:rem(665);
        background-color:$jh-grey-light-2;
        content:'';

        @media all and (min-width: map-get($grid-breakpoints, lg)) {
            height:rem(500);
        }
    }
}
@mixin hoverIcon($color, $size){
    &:hover{
        &:after{
            animation:icon-hover 0.6s ease-out;
        }
    }
    &:after{
        position:absolute;
        top:50%;
        left:50%;
        display:block;
        width:$size;
        height:$size;
        background:$color;
        border-radius:50%;
        content:'';
        transform:translate(-50%, -50%) scale(0.001, 0.001);
    }
}
@keyframes icon-hover{
    50%{
        opacity:0;
        transform:translate(-50%, -50%) scale(1.6, 1.6);
    }
    99%{
        opacity:0;
        transform:translate(-50%, -50%) scale(0.001, 0.001);
    }
    100%{
        opacity:1;
        transform:translate(-50%, -50%) scale(0.001, 0.001);
    }
}

@mixin hoverBold() {
    &:after{
        display:block;
        height:0;
        overflow:hidden;
        font-weight:bold;
        content:attr(title);
        opacity:0;
    }
}
